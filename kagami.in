#!/bin/bash
#
# Small and simple packages manager for Ataraxia Linux
#

umask 022
unalias -a

pushd () { command pushd "$@" > /dev/null; }
popd () { command popd "$@" > /dev/null; }
msg() { echo -e "\033[1;32m >>> \033[0m$@"; }
msgtwo() { echo -e "\033[1;35m * \033[0m$@"; }
warn() { echo -e "\033[1;33m ??? \033[0m$@"; }
warntwo() { echo -e "\033[1;33m * \033[0m$@"; }

die() {
	echo -e "\033[1;31m >>> \033[0m$@"

	if [ "$kagami_mode" = "build_package" ]; then
		unset name version release source backup options
		unset -f build

		if [ "$NOCLEAN" != "yes" ]; then
			rm -rf "$WORK"
		fi
	fi

	exit 1
}

dietwo() {
	echo -e "\033[1;31m * \033[0m$@"

	if [ "$kagami_mode" = "build_package" ]; then
		unset name version release source backup options
		unset -f build

		if [ "$NOCLEAN" != "yes" ]; then
			rm -rf "$WORK"
		fi
	fi

	exit 1
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'kagami'"
	fi
}

source_config() {
	if [ -f "$CONFIG" ]; then
		source "$CONFIG"
	else
		die "Failed to source the configuration file"
	fi
}

source_recipe() {
	if [ -f "$TOPDIR/KagamiBuild" ]; then
		source "$TOPDIR/KagamiBuild"
	elif [ -f "$TOPDIR/KBUILD" ]; then
		source "$TOPDIR/KBUILD"
	elif [ -f "$TOPDIR/Pkgfile" ]; then
		source "$TOPDIR/Pkgfile"
	else
		die "Failed to source the package recipe"
	fi

	if [ -z "$name" ]; then
		dietwo "The name of package is not set"
	elif [ -z "$version" ]; then
		dietwo "The version of package is not set"
	elif [ -z "$release" ]; then
		dietwo "The release of package is not set"
	fi
}

get_filename() {
	local ABSOLUTE=""
	if [ "$1" = "-a" ]; then
		ABSOLUTE=1
		shift
	fi

	if [[ $1 =~ ^(http|https|ftp|file)://.*/(.+) ]]; then
		echo "$SRCDEST/${BASH_REMATCH[2]}"
	else
		if [ "$ABSOLUTE" ]; then
			echo $TOPDIR/$1
		else
			echo $1
		fi
	fi
}

url_fetch() {
	[ -f "$1" ] || curl $CURLOPTS -Sq --progress-bar -L "$2" > "$1" || {
		rm -f "$1"
		dietwo "Failed to fetch $1"
	}
}

download_file() {
	pushd "$SRCDEST"
		for s in $1; do
			if echo "$s" | grep -q -E '^((https|http|ftp|rtsp|mms)?:\/\/).+'; then
				local target="`basename $s`"
				msgtwo "Downloading $target"
				url_fetch "$target" "$s"
			fi
		done
	popd
}

download_source() {
	local FILE LOCAL_FILENAME

	if [ -n "$source" ]; then
		for FILE in ${source[@]}; do
			LOCAL_FILENAME=`get_filename $FILE`
			if [ ! -e $LOCAL_FILENAME ]; then
				if [ "$LOCAL_FILENAME" = "$FILE" ]; then
					dietwo "Source file '$LOCAL_FILENAME' not found (can not be downloaded, URL not specified)."
				else
					download_file $FILE
				fi
			fi
		done
	fi
}

unpack_source() {
	local FILE LOCAL_FILENAME COMMAND a

	if [ -n "$source" ]; then
		for FILE in ${source[@]}; do
			LOCAL_FILENAME=`get_filename $FILE`
			a="$(basename $FILE)"
			case $LOCAL_FILENAME in
				*.tar|*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz|*.tar.lzma|*.tar.lz|*.tlz|*.tar.lz4|*.tar.zst|*.tar.zstd|*.zip|*.rpm|*.7z)
					msgtwo "Extacting $a to the sources directory"
					bsdtar -p -o -C "$SRC" -xf $LOCAL_FILENAME || dietwo "Failed to extract $a to the sources directory"
					;;
				*)
					msgtwo "Copying $a to the sources directory"
					cp $LOCAL_FILENAME "$SRC" || dietwo "Failed to copy $a to the sources directory"
					;;
			esac
		done
	fi
}

run_strip() {
	local fs="$1"

	find "$fs/" -type f 2>/dev/null | while read -r binary ; do
		case "$(file -bi $binary)" in
			*application/x-sharedlib*)  # Libraries (.so)
				${CROSS_COMPILE}strip --strip-unneeded "$binary" ;;
			*application/x-pie-executable*)  # Libraries (.so)
				${CROSS_COMPILE}strip --strip-unneeded "$binary" ;;
			*application/x-archive*)    # Libraries (.a)
				${CROSS_COMPILE}strip --strip-debug "$binary" ;;
			*application/x-executable*) # Binaries
				${CROSS_COMPILE}strip --strip-all "$binary" ;;
			*)
				continue ;;
		esac
	done
}

compile_package() {
	local FILE DIR TARGET

	cd "$SRC"

	msgtwo "Fixing permissions"
	chown -R root:root .
	find . -perm 777 -exec chmod 755 {} \;
	find . -perm 775 -exec chmod 755 {} \;
	find . -perm 754 -exec chmod 755 {} \;
	find . -perm 664 -exec chmod 644 {} \;

	if [ "$NOOPTIONS" != "yes" ]; then
		local myopts

		for myopts in ${OPTIONS[@]} ${options[@]}; do
			case $myopts in
				~emptydirs)
					OPT_EMPTYDIRS=0
					;;
				emptydirs)
					OPT_EMPTYDIRS=1
					;;
				~strip)
					OPT_STRIP=0
					;;
				strip)
					OPT_STRIP=1
					;;
				~makeflags)
					OPT_MAKEFLAGS=0
					;;
				makeflags)
					OPT_MAKEFLAGS=1
					;;
				~locales)
					OPT_LOCALES=0
					;;
				locales)
					OPT_LOCALES=1
					;;
				~docs)
					OPT_DOCS=0
					;;
				docs)
					OPT_DOCS=1
					;;
			esac
		done
	else
		warntwo "Don't using options"
	fi

	if [ "$OPT_MAKEFLAGS" != "0" ]; then
		export MAKEFLAGS="$MKOPTS"
		export NINJA_OPTIONS="$MKOPTS"
	else
		unset MAKEFLAGS NINJA_OPTIONS MKOPTS
	fi

	if type build > /dev/null 2>&1; then
		msgtwo "Compiling package"
		build || dietwo "Failed to compile package"
	fi

	cd "$PKG"

	msgtwo "Removing junk from package"
	rm -rf {,usr/}{,local/}{,share/}{info} usr{,/local}{,/share},opt/*}/{info}
	rm -rf {,usr/}{,local/}lib/charset.alias

	find . -name "*.la" -print0 | xargs -0 rm -rf
	find . -name "*.pod" -print0 | xargs -0 rm -rf
	find . -name ".packlist" -print0 | xargs -0 rm -rf

	if [ "$OPT_EMPTYDIRS" = "0" ]; then
		msgtwo "Removing empty directories"
		find . -type d -empty -print0 | xargs -0 rm -rf
	fi

	if [ "$OPT_LOCALES" = "0" ]; then
		msgtwo "Removing locales"
		rm -rf {,usr/}{,local/}{,share/}{locale}
	fi

	if [ "$OPT_DOCS" = "0" ]; then
		msgtwo "Removing documentation"
		rm -rf {,usr/}{,local/}{,share/}{doc} usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc}
	fi

	msgtwo "Compressing manual pages"
	find . -type f -path "*/man/man*/*" | while read FILE; do
		if [ "$FILE" = "${FILE%%.gz}" ]; then
			pigz -9 "$FILE"
		fi
	done

	find . -type l -path "*/man/man*/*" | while read FILE; do
		TARGET=`readlink -n "$FILE"`
		TARGET="${TARGET##*/}"
		TARGET="${TARGET%%.gz}.gz"
		rm -f "$FILE"
		FILE="${FILE%%.gz}.gz"
		DIR=`dirname "$FILE"`

		if [ -e "$DIR/$TARGET" ]; then
			ln -sf "$TARGET" "$FILE"
		fi
	done

	if [ "$OPT_STRIP" != "0" ]; then
		msgtwo "Removing debug information from binary files"
		run_strip "$PKG"
	fi
}

create_package() {
	TARGET="$PKGDEST/${name}#${version}+${release}.kagami"

	msgtwo "Generating package metadata"
	cd "$PKG"

	find $(ls) >> CONTENTS

	mkdir data
	mv CONTENTS data/CONTENTS

	echo "NAME=${name}" >> data/METADATA
	echo "VERSION=${version}" >> data/METADATA
	echo "RELEASE=${release}" >> data/METADATA

	if [ -n "$backup" ]; then
		local mybackup
		for mybackup in ${backup[@]}; do
			echo "$mybackup" >> data/BACKUP
		done
	fi

	if [ -f "$TOPDIR/INSTALL" ]; then
		cp "$TOPDIR/INSTALL" data/INSTALL
		chmod +x data/INSTALL
	fi

	msgtwo "Creating package archive"
	rm -rf "$TARGET"
	bsdtar -c --zstd -f "$TARGET" .

	msg "Package have been successfully built"
}

build_package() {
	unset name version release source backup options
	unset -f build

	source_recipe
	msg "Building package: '${name}'"

	rm -rf "$WORK"
	mkdir -p "$PKG" "$SRC"

	if [ "$USEBOOTSTRAP" = "yes" ]; then
		dietwo "This package couldn't be built in the cross environment"
	fi

	if [ "$NODOWNLOAD" != "yes" ]; then
		download_source
	fi

	if [ "$NOUNPACK" != "yes" ]; then
		unpack_source
	fi

	if [ "$NOBUILD" != "yes" ]; then
		compile_package
	fi

	if [ "$NOPACKAGE" != "yes" ]; then
		create_package
	fi

	if [ "$NOCLEAN" != "yes" ]; then
		rm -rf "$WORK"
	fi
}

export LC_ALL=POSIX
export VERSION="@VERSION@"
export TOPDIR="$PWD"

CONFIG="/etc/kagami.conf"
ROOTDIR="/"
WORK="$TOPDIR/work"
PKG="$WORK/pkg"
SRC="$WORK/src"
PKGDEST="$TOPDIR"
SRCDEST="$TOPDIR"
OPTIONS=('emptydirs' 'strip' 'makeflags' 'locales' 'docs')
NOOPTIONS="no"
NOCLEAN="no"
NODOWNLOAD="no"
NOUNPACK="no"
NOBUILD="no"
NOPACKAGE="no"
NEEDED="no"
NOBACKUP="no"
NODEPENDS="no"
NOCONFLICTS="no"
NOSCRIPTS="no"
NOHOOKS="no"
USEBOOTSTRAP="no"

while getopts :IBERoCDxbpnXdfsHWc:r:vh options; do
	case $options in
		I)
			kagami_mode=install_package
			;;
		B)
			kagami_mode=build_package
			;;
		E)
			kagami_mode=emerge_package
			;;
		R)
			kagami_mode=remove_package
			;;
		c)
			CONFIG="$OPTARG"
			;;
		r)
			ROOTDIR="$OPTARG"
			;;
		o)
			NOOPTIONS="yes"
			;;
		C)
			NOCLEAN="yes"
			;;
		D)
			NODOWNLOAD="yes"
			;;
		x)
			NOUNPACK="yes"
			;;
		b)
			NOBUILD="yes"
			;;
		p)
			NOPACKAGE="yes"
			;;
		n)
			NEEDED="yes"
			;;
		X)
			NOBACKUP="yes"
			;;
		d)
			NODEPENDS="yes"
			;;
		f)
			NOCONFLICTS="yes"
			;;
		s)
			NOSCRIPTS="yes"
			;;
		H)
			NOHOOKS="yes"
			;;
		W)
			USEBOOTSTRAP="yes"
			;;
		v)
			version
			;;
		h)
			usage
			;;
		:)
			die "Option '-${OPTARG}' needs an argument"
			;;
		\?)
			die "Option '-${OPTARG}' is illegal"
			;;
	esac
done
if [ "$#" -eq 0 ]; then
	die "Specify options. To list available options use: kagami -h"
fi
shift $((OPTIND - 1))

check_for_root
source_config

if [ "$kagami_mode" = "install_package" ] || [ "$kagami_mode" = "emerge_package" ] || [ "$kagami_mode" = "remove_package" ]; then
	if [ "$ROOTDIR" != "/" ]; then
		ROOTDIR="${ROOTDIR%/}"
	fi

	for mypackages in "$@"; do
		$kagami_mode $mypackages
	done
else
	$kagami_mode
fi

exit 0

